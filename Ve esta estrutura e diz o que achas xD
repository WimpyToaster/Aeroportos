#include <stdio.h>
#include <string.h>

#define ABERTO 1
#define FECHADO 0
#define AERO_MAX 1000
#define FALSO_INDEX 1337 /* Apenas para usar na funcao auciliar que procura o index de um certo aeroporto */

int total_aeroportos = 0;

		/* Se te lembrares de uma forma melhor de fazer as estrutas diz :) */
typedef struct{

	int partida;
	int destino;

}voo;

typedef struct{

	int cap_max;
	char id[4];
	int estado;
	int incoming;     /* guardamos quantos voos chegam a este aeroporto */  
	int outgoing;		/* guardamos quantos voos saem deste aeroporto, e assim usamos para referencia de onde escrever o novo voo nesse aeroporto */
	voo voos[cap_max];  /* Vetor onde guardamos os voos que saem desse aeroporto */

}aeroporto;

aeroporto generico[AERO_MAX];



void cria_aeroporto(int cap, char id[]);
void alt_cap_aero(char id[], int alt);
void adiciona_voo_idavolta(char id1[], char id2[]);
void adiciona_rota(char id1[], char id2[]);
void remove_voo(char id1[], char id2[]);
void remove_voo_idavolta(char id1[] char id2[]);
void numero_voos(char id1[], char id2[]);

int encontra_index(char id1[], char id2[]);


int main()
{
    int x;
    char y[4];
    char z[4], v[4];
    scanf("%d %s", &x, y);
    cria_aeroporto(x,y);
    scanf("%d %s", &x, y);
    cria_aeroporto(x, y);
    scanf("%s %s", z, v);
    adiciona_voo(z, v);
    printf("%d\n", generico[1].incoming);

    
	return 0;

}



void cria_aeroporto(int cap, char id[])
{	
    generico[total_aeroportos].cap_max = cap;
    strcpy(generico[total_aeroportos].id, id);
    generico[total_aeroportos].estado = ABERTO;
    generico[total_aeroportos].incoming = 0;
    generico[total_aeroportos].outgoing = 0;
	
	total_aeroportos++;
}

void alt_cap_aero(char id[], int alt)
{
	int i = 0;

	for (; i <= total_aeroportos; i++)
	{
		if (i==total_aeroportos)
		{
			printf("Capacidade de %s inalterado.\n", id);
		}
		else if (strcmp(generico[i].id, id)==0)
		{
			generico[i].cap_max += alt;
			break;
		}
	}
}


  	/* Falta vou acabar todas estas amanha como se mudou a forma de guardar os voos */

void adiciona_voo_idavolta(char id1[], char id2[])
{
	
	int index[2];
	if (encontra_index(id1, id2) == FALSO_INDEX)
	{
		printf("Impossivel adicionar voo RT %s %s\n", id1, id2);
	}
	else
	{
		generico[index[0]].incoming += 1;
		generico[index[0]].outgoing += 1;
		

		generico[index[1]].incoming += 1;
		generico[index[1]].outgoing += 1;

	}
}

void adiciona_rota(char id1[], char id2[])
{
	int index[2];
	if (encontra_index(id1, id2) == FALSO_INDEX)
	{
		printf("Impossivel adicionar voo %s %s\n", id1, id2);
	}
	else
	{
		generico[index[0]].outgoing += 1;
		generico[index[1]].incoming += 1;
		
	}

}

void remove_voo(char id1[], char id2[])
{
	int index[2];
	
	if (encontra_index(id1, id2) == FALSO_INDEX)
	{
		printf("Impossivel remover voo %s %s\n", id1, id2);
	}
	
	else if (generico[index[0]].outgoing == 0 || generico[index[1]].incoming == 0)
	{
		printf("Impossivel remover voo %s %s\n", id1, id2);
	}
	
	else
	{
		generico[index[0]].outgoing -= 1;
		generico[index[1]].incoming -= 1;
	}
}

void remove_voo_idavolta(char id1[] char id2[])
{
	int index[2];
	
	if (encontra_index(id1, id2) == FALSO_INDEX)
	{
		printf("Impossivel remover voo %s %s\n", id1, id2);
	}
	
	else if (generico[index[0]].outgoing == 0 || generico[index[0]].incoming == 0 || generico[index[1]].outgoing == 0 || generico[index[1]].incoming == 0)
	{
		printf("Impossivel remover voo RT %s %s\n", id1, id2);
	}
	
	else
	{
		generico[index[0]].outgoing -= 1;
		generico[index[0]].incoming -= 1;
		generico[index[1]].outgoing -= 1;
		generico[index[1]].incoming -= 1;
	}
}



void numero_voos(char id1[], char id2[])
{

}






/*Funcoes Auxiliares*/


int encontra_index(char id1[], char id2[])
{

	int i = 0;
	int flag1 = 0 , flag2 = 0;
	int index[2];

	/* warning: index defenido mas nao utilisado ??????? resolver prob!!!! nao percebo o porque disto xD */

	for (; i < total_aeroportos; i++)
	{
		if (flag1 == 0)
		{
			if(strcmp(generico[i].id, id1)==0)
			{
				index[0] = i;
				flag1 = 1;
			}
		}

		if (flag2 == 0)
		{
			if (strcmp(generico[i].id, id2)==0)
			{
				index[1] = i;
				flag2 = 1;
			}
		}
	}

	if (flag1 == 0 || flag2 == 0)
		return FALSO_INDEX;

	else
		return 0;
}
